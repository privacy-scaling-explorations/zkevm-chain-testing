// SPDX-License-Identifier: MIT
 
pragma solidity 0.8.17;
 
contract CheckKeccak {
 
    function checkBatchYul(uint256 l) external  returns (bytes32 r) {
        uint256 len = l / 100;
        uint256 p = 0;
        uint256 n = 1;
        for (uint256 i; i<len; i++) {
            assembly {
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n)) 
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))   
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n)) 
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))
               pop(keccak256(p, n))                                                                                                           
            }
        }
        return 0;
    }
}